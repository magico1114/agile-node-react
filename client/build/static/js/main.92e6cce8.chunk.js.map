{"version":3,"sources":["components/Transaction/Transaction.js","containers/TransactionsContainer/TransactionsContainer.js","App.js","serviceWorker.js","index.js"],"names":["Transaction","panel","transaction","useState","expanded","setExpanded","id","type","amount","effectiveDate","ExpansionPanel","onChange","event","isExpanded","ExpansionPanelSummary","className","expandIcon","aria-controls","Grid","container","spacing","item","xs","Typography","ExpansionPanelDetails","TransactionsContainer","loading","setLoading","transactions","setTransactions","useEffect","getData","cb","console","log","fetch","mode","then","response","json","data","arrData","Object","keys","map","i","catch","setTimeout","CircularProgress","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAwDeA,EA/CK,SAAC,GAAqB,IAIjBC,EAJFC,EAAkB,EAAlBA,YAAkB,EAELC,oBAAS,GAFJ,mBAE9BC,EAF8B,KAEpBC,EAFoB,KAQ7BC,EAAoCJ,EAApCI,GAAIC,EAAgCL,EAAhCK,KAAMC,EAA0BN,EAA1BM,OAAQC,EAAkBP,EAAlBO,cAC1B,OACI,kBAACC,EAAA,EAAD,CAAgBN,SAAuB,UAAbA,EAAuBO,UANhCV,EAMuD,QAN9C,SAACW,EAAOC,GAClCR,IAAYQ,GAAaZ,MAMrB,kBAACa,EAAA,EAAD,CAAuBC,UAAWR,EAAMS,WAAY,kBAAC,IAAD,MAAoBC,gBAAc,mBAAmBX,GAAG,mBACxG,kBAACY,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,KAAahB,IAEjB,kBAACW,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,KAAaf,MAIzB,kBAACgB,EAAA,EAAD,KAEI,kBAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACE,MAAI,EAACC,GAAI,IACrB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,wBAEJ,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,KAAajB,KAGrB,kBAACY,EAAA,EAAD,CAAMC,WAAS,EAACE,MAAI,EAACC,GAAI,IACrB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,cAEJ,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,KAAad,SCS1BgB,EAhCe,WAAO,IAAD,EACFtB,oBAAS,GADP,mBACzBuB,EADyB,KAChBC,EADgB,OAEQxB,mBAAS,IAFjB,mBAEzByB,EAFyB,KAEXC,EAFW,KAIhCC,qBAAU,YAvBE,SAAVC,EAAWC,GACbC,QAAQC,IAAI,oBACZC,MAAM,iBAAkB,CAACC,KAAM,SAC1BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MACG,SAAAG,GACIP,QAAQC,IAAI,0BACZ,IAAMO,EAAUC,OAAOC,KAAKH,GAAMI,KAAI,SAAAC,GAAC,OAAIL,EAAKK,MAChDZ,QAAQC,IAAIO,GACZT,EAAGS,MAETK,OAAM,WACJb,QAAQC,IAAI,kCACZa,YAAW,kBAAIhB,MAAU,QAW7BA,EAAQ,SAACH,GACLK,QAAQC,IAAI,oBAAqBN,GACjCC,EAAgBD,GAChBD,GAAW,QAEd,IAQL,OAAID,EAEI,yBAAKX,UAAU,eACX,kBAACiC,EAAA,EAAD,OAKR,yBAAKjC,UAAU,QAbfa,EAAagB,KAAI,SAAA1C,GAAW,OACxB,kBAAC,EAAD,CAAa+C,IAAK/C,EAAYI,GAAIJ,YAAaA,S,MCzB5CgD,MARf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,QCKcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.92e6cce8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport \"./Transaction.css\";\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst Transaction = ( {transaction} ) => {\r\n\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n    const handleChange = panel => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false);\r\n      };\r\n\r\n    const { id, type, amount, effectiveDate } = transaction\r\n    return (\r\n        <ExpansionPanel expanded={expanded === 'panel'}  onChange={handleChange('panel')}>\r\n            <ExpansionPanelSummary className={type} expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1bh-content\" id=\"panel1bh-header\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <Typography>{type}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Typography>{amount}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                \r\n                <Grid container spacing={3}>\r\n                    <Grid container item xs={12}>\r\n                        <Grid item xs={6}>\r\n                            <Typography>Transaction ID</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography>{id}</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container item xs={12}>\r\n                        <Grid item xs={6}>\r\n                            <Typography>Date</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography>{effectiveDate}</Typography>\r\n                        </Grid>\r\n                    </Grid>    \r\n                </Grid>\r\n                \r\n            </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n    )\r\n}\r\n\r\nexport default Transaction;","import React, { useState, useEffect } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Transaction from '../../components/Transaction';\r\n\r\nconst getData = (cb) => {\r\n    console.log('GET Transactions');\r\n    fetch('/transactions/', {mode: 'cors'})\r\n        .then(response => response.json())\r\n        .then(\r\n            data => {\r\n                console.log(\"Transactions received!\");\r\n                const arrData = Object.keys(data).map(i => data[i])\r\n                console.log(arrData);\r\n                cb(arrData);\r\n            }\r\n        ).catch(()=> {\r\n            console.log(\"Error: Retrying in 10 seconds.\");\r\n            setTimeout(()=>getData(),10*1000)\r\n\r\n        }\r\n    );\r\n}\r\n\r\nconst TransactionsContainer = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [transactions, setTransactions] = useState([]);  \r\n\r\n    useEffect(() => {\r\n        getData((transactions)=>{\r\n            console.log(\"getData returns: \", transactions );\r\n            setTransactions(transactions);\r\n            setLoading(false);\r\n        })\r\n      }, []);\r\n\r\n    const getTransactions = () => (\r\n        transactions.map(transaction => (\r\n            <Transaction key={transaction.id} transaction={transaction}></Transaction>\r\n        ))\r\n    )\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"mainLoading\">\r\n                <CircularProgress />\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"main\">\r\n            {getTransactions()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TransactionsContainer;","import React from 'react';\nimport TransactionsContainer from './containers/TransactionsContainer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TransactionsContainer></TransactionsContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}